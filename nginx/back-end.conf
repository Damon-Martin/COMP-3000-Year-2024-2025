worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # IP Addresses of Backends
    upstream backend_servers {
        server back-end:3000;  # Backend
        server back-end2:3000; # Backend Parrallel
    }

    server {
        listen 5000 ssl;
        server_name comp3000-el-comercio.xyz;

        # Pointing to the raw SSL certs
        ssl_certificate /etc/nginx/ssl/domain.cert.pem;
        ssl_certificate_key /etc/nginx/ssl/private.key.pem;

        # SSL Configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Adding Security headers against things like XSS
        add_header Strict-Transport-Security "max-age=31536000;" always;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        location / {
            proxy_pass http://backend_servers;  # Useing the upstream block for load balancing

            # Giving information about the ip origin from the nginx server (for client)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Adding CORS Headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
        }
    }
}
